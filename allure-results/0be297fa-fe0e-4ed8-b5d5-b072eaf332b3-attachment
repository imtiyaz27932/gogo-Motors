# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Header tests >> Verify that user can login
- Location: D:\gogomotor\tests\header\headerTest.spec.ts:25:9

# Error details

```
Error: locator.click: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByRole('button', { name: 'login' })
    - locator resolved to <button id="loginid" tabindex="5" type="button" aria-label="login" class="relative flex gap-2 items-center flex-shrink-0 text-15 font-mediu text-white">…</button>
  - attempting click action
    2 × waiting for element to be visible, enabled and stable
      - element is visible, enabled and stable
      - scrolling into view if needed
      - done scrolling
      - <div class="fixed top-0 left-0 h-full w-full z-[101] flex items-end sm:items-center justify-center bg-black/80">…</div> intercepts pointer events
    - retrying click action
    - waiting 20ms
    2 × waiting for element to be visible, enabled and stable
      - element is visible, enabled and stable
      - scrolling into view if needed
      - done scrolling
      - <div class="fixed top-0 left-0 h-full w-full z-[101] flex items-end sm:items-center justify-center bg-black/80">…</div> intercepts pointer events
    - retrying click action
      - waiting 100ms
    33 × waiting for element to be visible, enabled and stable
       - element is visible, enabled and stable
       - scrolling into view if needed
       - done scrolling
       - <div class="fixed top-0 left-0 h-full w-full z-[101] flex items-end sm:items-center justify-center bg-black/80">…</div> intercepts pointer events
     - retrying click action
       - waiting 500ms

    at HeaderPage.loginWithCountryCode (D:\gogomotor\pages\headerPage.ts:90:32)
    at D:\gogomotor\tests\header\headerTest.spec.ts:27:26
```

# Test source

```ts
   1 | import { Page, expect } from "@playwright/test";
   2 | import { faker } from "@faker-js/faker";
   3 |
   4 | export class HeaderPage {
   5 |     private page: Page;
   6 |
   7 |     constructor(page: Page) {
   8 |         this.page = page;
   9 |     }
   10 |
   11 |     // Selectors
   12 |     private logoicon = () => this.page.getByRole("link", { name: /GoGo Motor - Buy and Sell/i });
   13 |     private languageSelector = () => this.page.getByRole("button", { name: "Riyadh" });
   14 |     private wishListicon = () => this.page.getByRole("button", { name: "wishlist" });
   15 |     private loginicon = () => this.page.getByRole("button", { name: "login" });
   16 |     private loginclosebtn = () => this.page.locator('#back-btn-wrapper div').getByRole('img');
   17 |     private newcars = () => this.page.getByRole('navigation').getByText('New Cars');
   18 |     private buysellcars = () => this.page.getByRole('navigation').getByText('Buy & Sell Used Cars');
   19 |     private deals = () => this.page.getByRole('navigation').getByText('Deals', { exact: true });
   20 |     private services = () => this.page.getByRole('navigation').getByText('Services');
   21 |     private countrycodelist = () => this.page.getByRole('combobox');
   22 |     private PhoneNumber = () => this.page.getByRole('textbox', { name: 'Mobile Number' });
   23 |     private proceedBtn = () => this.page.getByRole('button', { name: 'Proceed' });
   24 |         
   25 |     // Navigate to the home page
   26 |     async navigateToHomePage() {
   27 |         const baseUrl = process.env.BASE_URL;
   28 |         if (!baseUrl) {
   29 |             throw new Error("BASE_URL is not defined in environment variables.");
   30 |         }
   31 |
   32 |         await this.page.goto(baseUrl);
   33 |         await this.page.waitForLoadState("networkidle");  // Ensures all network requests are done
   34 |         await expect(this.page).toHaveURL(new RegExp(`${baseUrl}.*`), { timeout: 10000 });
   35 |
   36 |         console.log("✅ Current URL:", this.page.url());
   37 |     }
   38 |
   39 |     // Verify that all elements are displayed in the header
   40 |     async verifyHeaderElements() {
   41 |         await expect(this.logoicon()).toBeVisible();
   42 |         await expect(this.languageSelector()).toBeVisible();
   43 |         await expect(this.wishListicon()).toBeVisible();
   44 |         await expect(this.loginicon()).toBeVisible();
   45 |         await expect(this.newcars()).toBeVisible();
   46 |         await expect(this.buysellcars()).toBeVisible();
   47 |         await expect(this.deals()).toBeVisible();
   48 |         await expect(this.services()).toBeVisible();
   49 |
   50 |         await this.page.screenshot({ path: "screenshots/header_elements.png" });
   51 |         console.log('✅ All header elements are visible.');
   52 |     }
   53 |     
   54 |     // Verify that header top section elements are clickable
   55 |     async verifyClickFunctionality() {
   56 |         await this.wishListicon().click();
   57 |         await this.page.waitForLoadState("networkidle");  
   58 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/wishlist', { timeout: 15000 });
   59 |         console.log('✅ Wishlist icon clicked.');
   60 |
   61 |         await this.loginicon().click();
   62 |         await this.page.waitForLoadState("networkidle");
   63 |         await this.loginclosebtn().click();
   64 |         console.log('✅ Login icon clicked and closed.');
   65 |     }
   66 |
   67 |     // Verify navigation menu elements are clickable
   68 |     async verifyTabNavigation() {
   69 |         await this.newcars().click();
   70 |         await this.page.waitForLoadState("networkidle");
   71 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/newcars', { timeout: 15000 });
   72 |
   73 |         await this.buysellcars().click();
   74 |         await this.page.waitForLoadState("networkidle");
   75 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/used-cars/riyadh-surveyed', { timeout: 15000 });
   76 |
   77 |         await this.deals().click();
   78 |         await this.page.waitForLoadState("networkidle");
   79 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/campaigns', { timeout: 15000 });
   80 |
   81 |         await this.services().click();
   82 |         await this.page.waitForLoadState("networkidle");
   83 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/vas/warranty', { timeout: 15000 });
   84 |
   85 |         await this.page.screenshot({ path: "screenshots/header_tabs.png" });
   86 |         console.log('✅ All header tabs navigated successfully.');
   87 |     }
   88 |
   89 |     async loginWithCountryCode(index: number, countryCode: string) {
>  90 |         await this.loginicon().click();
      |                                ^ Error: locator.click: Test timeout of 30000ms exceeded.
   91 |         await this.page.waitForLoadState("networkidle");
   92 |         await this.page.waitForTimeout(2000);
   93 |     
   94 |         await this.countrycodelist().selectOption({ index });
   95 |         await this.page.waitForTimeout(1000);
   96 |     
   97 |         let phoneNumber = '';
   98 |         if (countryCode === '+91') {
   99 |             // Generate an Indian number (starting with 9 and 9 digits after)
  100 |             phoneNumber = '9' + faker.string.numeric(9);
  101 |         } else if (countryCode === '+966') {
  102 |             // Generate a Saudi number (commonly starts with 5 and 8 digits after)
  103 |             phoneNumber = '5' + faker.string.numeric(8);
  104 |         } else {
  105 |             phoneNumber = faker.phone.number();
  106 |         }
  107 |     
  108 |         await this.PhoneNumber().fill(phoneNumber);
  109 |         await this.proceedBtn().click();
  110 |         await this.page.waitForLoadState("networkidle");
  111 |         await this.page.screenshot({ path: `screenshots/login_${countryCode}.png` });
  112 |     
  113 |     }
  114 |     
  115 |     async loginWithSaudiAndIndia() {
  116 |         // First login with Saudi code (index 1)
  117 |         await this.loginWithCountryCode(1, '+966');
  118 |     
  119 |         // You can optionally reload or navigate back to home page if needed
  120 |         await this.page.goto(process.env.BASE_URL || '');
  121 |         await this.page.waitForLoadState("networkidle");
  122 |     
  123 |         // Then login with India code (index 2)
  124 |         await this.loginWithCountryCode(2, '+91');
  125 |     }
  126 |     
  127 | }
  128 |
```