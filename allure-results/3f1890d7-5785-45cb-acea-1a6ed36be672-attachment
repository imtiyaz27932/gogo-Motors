# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Header tests >> Verify that all elements in the navigation menu are clickable
- Location: D:\gogomotor\tests\header\headerTest.spec.ts:22:9

# Error details

```
Error: Timed out 15000ms waiting for expect(locator).toHaveURL(expected)

Locator: locator(':root')
Expected string: "https://liveuat.gogomotor.com/en/used-cars/riyadh-surveyed"
Received string: "https://liveuat.gogomotor.com/en/used-cars"
Call log:
  - expect.toHaveURL with timeout 15000ms
  - waiting for locator(':root')
    5 × locator resolved to <html dir="ltr" lang="en" translate="no">…</html>
      - unexpected value "https://liveuat.gogomotor.com/en/newcars"
    13 × locator resolved to <html dir="ltr" lang="en" translate="no">…</html>
       - unexpected value "https://liveuat.gogomotor.com/en/used-cars"

    at HeaderPage.verifyTabNavigation (D:\gogomotor\pages\headerPage.ts:80:33)
    at D:\gogomotor\tests\header\headerTest.spec.ts:23:9
```

# Page snapshot

```yaml
- banner:
  - text: Your browser does not support the video tag.
  - link "GoGo Motor - Buy and Sell New & Used Cars in Saudi Arabia":
    - img "GoGo Motor - Buy and Sell New & Used Cars in Saudi Arabia"
  - button "Riyadh":
    - img
    - text: Riyadh
    - img
  - button "wishlist":
    - text: Save
    - img
  - button "login":
    - img
    - text: Login
  - img "icon"
  - text: عربى
  - navigation "Global":
    - text: New Cars Buy & Sell Used Cars
    - link "Buy Used Cars Purchase quality used cars with confidence and ease":
      - heading "Buy Used Cars" [level=2]:
        - text: Buy Used Cars
        - img
      - text: Purchase quality used cars with confidence and ease
    - link "Sell My Car Sell your car with ease for the best price":
      - heading "Sell My Car" [level=2]:
        - text: Sell My Car
        - img
      - text: Sell your car with ease for the best price
    - link "Surveyed Cars Carefully inspected by experts, ensuring quality with 300+ point evaluation":
      - heading "Surveyed Cars" [level=2]:
        - text: Surveyed Cars
        - img
      - text: Carefully inspected by experts, ensuring quality with 300+ point evaluation
    - link "Outlet Cars Explore cars that are nearly new, with minor defects at a great value":
      - heading "Outlet Cars" [level=2]:
        - text: Outlet Cars
        - img
      - text: Explore cars that are nearly new, with minor defects at a great value
    - text: Deals Services
- main:
  - heading "Used Cars in Riyadh" [level=1]
  - button "Change city"
  - img
  - textbox "Search used car"
  - paragraph
  - paragraph
  - button "Sort By":
    - img
    - text: Sort By
    - img
  - paragraph: Surveyed cars only
  - paragraph: Budget
  - button "Accordion handler":
    - img
  - paragraph: Minimum
  - text: 
  - textbox: 5,000
  - paragraph: Maximum
  - text: 
  - textbox: 3,000,000
  - text: Set price range
  - slider "Lower thumb"
  - slider "Upper thumb"
  - paragraph: EMI
  - button "Accordion handler":
    - img
  - paragraph: Minimum
  - text: 
  - textbox: SAR 500
  - paragraph: Maximum
  - text: 
  - textbox: SAR 40,000
  - text: Set EMI range
  - slider "Lower thumb"
  - slider "Upper thumb"
  - paragraph: Make & Models
  - button "Accordion handler":
    - img
  - textbox "Search brand name"
  - img
  - paragraph
  - paragraph
  - paragraph: "124"
  - paragraph: 124GG
  - paragraph: AaTest_Make
  - paragraph: ABARTH
  - paragraph: ABARTHGG
  - paragraph: ABARTHGGG
  - paragraph: Acura
  - paragraph: Adamp Motors
  - paragraph: AK TEST
  - paragraph: AL Motors
  - button "See all brands"
  - paragraph: Model Year
  - button "Accordion handler":
    - img
  - paragraph: From
  - text: 
  - textbox: "2020"
  - paragraph: to
  - text: 
  - textbox: "2026"
  - text: Set year range
  - slider "Lower thumb"
  - slider "Upper thumb"
  - paragraph: Body type
  - button "Accordion handler":
    - img
  - img "Sedan"
  - paragraph: Sedan
  - img "Coupe"
  - paragraph: Coupe
  - img "Sports Car"
  - paragraph: Sports Car
  - img "Large SUV"
  - paragraph: Large SUV
  - img "Small SUV"
  - paragraph: Small SUV
  - img "Hatchback"
  - paragraph: Hatchback
  - img "MPV"
  - paragraph: MPV
  - img "Van/Minivan"
  - paragraph: Van/Minivan
  - img "Pick Up"
  - paragraph: Pick Up
  - paragraph: Fuel type
  - button "Accordion handler":
    - img
  - img "Petrol"
  - paragraph: Petrol
  - img "Diesel"
  - paragraph: Diesel
  - paragraph: HEV
  - img "MHEV"
  - paragraph: MHEV
  - img "PHEV"
  - paragraph: PHEV
  - img "EV"
  - paragraph: EV
  - img "LPG"
  - paragraph: LPG
  - paragraph: Transmission
  - button "Accordion handler":
    - img
  - img "Automatic"
  - paragraph: Automatic
  - img "Manual"
  - paragraph: Manual
  - paragraph: Exterior Colour
  - button "Accordion handler":
    - img
  - paragraph: Black
  - paragraph: Silver
  - paragraph: White
  - paragraph: Gray
  - paragraph: Red
  - paragraph: Blue
  - paragraph: Gold
  - paragraph: Orange
  - paragraph: Green
  - paragraph: Brown
  - img
  - paragraph: Other
  - paragraph: Interior Colour
  - button "Accordion handler":
    - img
  - paragraph: Black
  - paragraph: White
  - paragraph: Gray
  - paragraph: Red
  - paragraph: Beige
  - img
  - paragraph: Other
  - paragraph: Ownership
  - button "Accordion handler":
    - img
  - paragraph: 1st Owner
  - paragraph: 2nd Owner
  - paragraph: 3rd Owner
  - paragraph: 4th Owner
  - paragraph: Kilometres driven
  - button "Accordion handler":
    - img
  - paragraph: From
  - text: 
  - textbox: 1 KM
  - paragraph: to
  - text: 
  - textbox: 999,999 KM
  - text: Set range
  - slider "Lower thumb"
  - slider "Upper thumb"
  - paragraph: Features
  - button "Accordion handler":
    - img
  - heading "Comfort" [level=2]
  - text: Cooled Seats Heated Seats Leather Interior Sunroof
  - heading "Entertainment" [level=2]
  - text: DVD Video Premium Sound Satellite Radio
  - heading "Safety" [level=2]
  - text: Blind Spot Sensors Lane Departure Warning Park Assist Rear View Camera
  - heading "Tech" [level=2]
  - text: Heads-Up Display Keyless Ignition Power Driver Seat Power Passenger Seat
  - heading "Utility" [level=2]
  - text: GPS Navigation Third Row Seats Tow Hitch
  - img
  - text: Surveyed
  - paragraph: Surveyed cars, for your worry-free drive
  - paragraph:
    - img
    - text: 300+ points inspection
  - paragraph:
    - img
    - text: Mojaz Report available
  - paragraph:
    - img
    - text: On board diagnosis report available
- contentinfo:
  - link "GoGo Motor - Buy and Sell New & Used Cars in Saudi Arabia":
    - img "GoGo Motor - Buy and Sell New & Used Cars in Saudi Arabia"
  - link "https://www.youtube.com/channel/UCgTpgQ321gcri3QKrfLf91A":
    - img "GoGo Motor YouTube Channel"
  - link "https://www.linkedin.com/company/gogomotorsa":
    - img "GoGo Motor LinkedIn Page"
  - link "https://www.facebook.com/GoGoMotorSA/":
    - img "GoGo Motor Facebook Page"
  - link "https://twitter.com/GoGoMotorSA":
    - img "GoGo Motor Twitter Profile"
  - link "https://www.instagram.com/gogomotorsa/":
    - img "GoGo Motor Instagram Profile"
  - text: Need Help ?
  - img
  - link "8002440258"
  - text: "Sunday - Thursday: 9:00 AM - 6:00 PM"
  - img
  - link "customercare@gogomotor.com"
  - text: Explore
  - button "New Cars"
  - button "Buy & Sell Used Cars"
  - text: Buy Used Cars Sell My Car Surveyed Cars Outlet Cars
  - button "Deals":
    - text: Deals
    - img
  - button "Services":
    - text: Services
    - img
  - text: Company
  - link "About Us"
  - link "Careers"
  - link "Contact Us"
  - link "FAQs"
  - text: Available Cities Riyadh Jeddah Dammam Mecca Medina Al Qassim See all Download GoGo Motor App
  - link "GoGo Motor App on Google Play for Android":
    - img "GoGo Motor App on Google Play for Android"
  - link "GoGo Motor App on the Apple Store for iOS":
    - img "GoGo Motor App on the Apple Store for iOS"
  - link "GoGo Motor App on Google Play for Android":
    - img "GoGo Motor App on Google Play for Android"
  - text: Subscribe to our newsletters
  - textbox "Enter your email address"
  - button "Subscribe" [disabled]
  - separator
  - list:
    - listitem:
      - link "Privacy Policy"
    - listitem:
      - link "Terms & Conditions"
    - listitem:
      - link "Sale & Purchase Policy"
    - listitem:
      - link "Refund & Cancellation Policy"
  - text: Accepted Payment Methods
  - img "stcpay"
  - img "visacard"
  - img "american-express"
  - img "mastercard"
  - img "casamada"
  - img "applepay"
  - paragraph: "Copyright © 2025-2026 National Auto Trust Company, All Rights Reserved, CR No.: 4030436087, VAT No.: 300000603210003, Unified No.: 7026415450, Office Address: Avant Masic Center, 2nd floor, 8491 King Abdul Aziz Rd, Al-Nahdah - Jeddah 23523 – Additional No. 2151"
  - img "special images"
- region "Notifications Alt+T"
- alert: ‪GoGo Motor‬
```

# Test source

```ts
   1 | import { Page, expect } from "@playwright/test";
   2 | import { faker } from "@faker-js/faker";
   3 |
   4 | export class HeaderPage {
   5 |     private page: Page;
   6 |
   7 |     constructor(page: Page) {
   8 |         this.page = page;
   9 |     }
   10 |
   11 |     // Selectors
   12 |     private logoicon = () => this.page.getByRole("link", { name: /GoGo Motor - Buy and Sell/i });
   13 |     private languageSelector = () => this.page.getByRole("button", { name: "Riyadh" });
   14 |     private wishListicon = () => this.page.getByRole("button", { name: "wishlist" });
   15 |     private loginicon = () => this.page.getByRole("button", { name: "login" });
   16 |     private loginclosebtn = () => this.page.locator('#back-btn-wrapper div').getByRole('img');
   17 |     private newcars = () => this.page.getByRole('navigation').getByText('New Cars');
   18 |     private buysellcars = () => this.page.getByRole('navigation').getByText('Buy & Sell Used Cars');
   19 |     private deals = () => this.page.getByRole('navigation').getByText('Deals', { exact: true });
   20 |     private services = () => this.page.getByRole('navigation').getByText('Services');
   21 |     private countrycodelist = () => this.page.getByRole('combobox');
   22 |     private PhoneNumber = () => this.page.getByRole('textbox', { name: 'Mobile Number' });
   23 |     private proceedBtn = () => this.page.getByRole('button', { name: 'Proceed' });
   24 |     private otpfield = () => this.page.locator('input[name="OTPNumber"]');
   25 |     private signinbtn = () => this.page.getByRole('button', { name: 'Sign In' });
   26 |     private getStartedBtn = () => this.page.getByRole('button', { name: 'Get Started' });
   27 |     private wishlistphonenumber = () => this.page.locator('div').filter({ hasText: /^Mobile Number\*$/ }).getByRole('textbox')
   28 |     private sendotplink =()=> this.page.getByText('OTP is sent on your mobile no.')
   29 |                 
   30 |     // Navigate to the home page
   31 |     async navigateToHomePage() {
   32 |         const baseUrl = process.env.BASE_URL;
   33 |         if (!baseUrl) {
   34 |             throw new Error("BASE_URL is not defined in environment variables.");
   35 |         }
   36 |
   37 |         await this.page.goto(baseUrl);
   38 |         await this.page.waitForLoadState("networkidle");  // Ensures all network requests are done
   39 |         await expect(this.page).toHaveURL(new RegExp(`${baseUrl}.*`), { timeout: 10000 });
   40 |
   41 |         console.log("✅ Current URL:", this.page.url());
   42 |     }
   43 |
   44 |     // Verify that all elements are displayed in the header
   45 |     async verifyHeaderElements() {
   46 |         await expect(this.logoicon()).toBeVisible();
   47 |         await expect(this.languageSelector()).toBeVisible();
   48 |         await expect(this.wishListicon()).toBeVisible();
   49 |         await expect(this.loginicon()).toBeVisible();
   50 |         await expect(this.newcars()).toBeVisible();
   51 |         await expect(this.buysellcars()).toBeVisible();
   52 |         await expect(this.deals()).toBeVisible();
   53 |         await expect(this.services()).toBeVisible();
   54 |
   55 |         await this.page.screenshot({ path: "screenshots/header_elements.png" });
   56 |         console.log('✅ All header elements are visible.');
   57 |     }
   58 |     
   59 |     // Verify that header top section elements are clickable
   60 |     async verifyClickFunctionality() {
   61 |         await this.wishListicon().click();
   62 |         await this.page.waitForLoadState("networkidle");
   63 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/wishlist', { timeout: 15000 });
   64 |         console.log('✅ Wishlist icon clicked.');
   65 |
   66 |         await this.loginicon().click();
   67 |         await this.page.waitForLoadState("networkidle");
   68 |         await this.loginclosebtn().click();
   69 |         console.log('✅ Login icon clicked and closed.');
   70 |     }
   71 |
   72 |     // Verify navigation menu elements are clickable
   73 |     async verifyTabNavigation() {
   74 |         await this.newcars().click();
   75 |         await this.page.waitForLoadState("networkidle");
   76 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/newcars', { timeout: 15000 });
   77 |
   78 |         await this.buysellcars().click();
   79 |         await this.page.waitForLoadState("networkidle");
>  80 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/used-cars/riyadh-surveyed', { timeout: 15000 });
      |                                 ^ Error: Timed out 15000ms waiting for expect(locator).toHaveURL(expected)
   81 |
   82 |         await this.deals().click();
   83 |         await this.page.waitForLoadState("networkidle");
   84 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/campaigns', { timeout: 15000 });
   85 |
   86 |         await this.services().click();
   87 |         await this.page.waitForLoadState("networkidle");
   88 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/vas/warranty', { timeout: 15000 });
   89 |
   90 |         await this.page.screenshot({ path: "screenshots/header_tabs.png" });
   91 |         console.log('✅ All header tabs navigated successfully.');
   92 |     }
   93 |
   94 |     async loginWithCountryCode(index: number, countryCode: string) {
   95 |         //await this.page.waitForSelector('.globalloader', { state: 'detached', timeout: 10000 });
   96 |         await this.page.waitForSelector('.globalloader', { state: 'hidden', timeout: 15000 });
   97 |
   98 |         await this.loginicon().click();
   99 |         await this.page.waitForLoadState("networkidle");
  100 |         await this.page.waitForTimeout(2000);
  101 |     
  102 |         await this.countrycodelist().selectOption({ index });
  103 |         await this.page.waitForTimeout(1000);
  104 |     
  105 |         let phoneNumber = '';
  106 |         if (countryCode === '+91') {
  107 |             phoneNumber = '9' + faker.string.numeric(9);
  108 |         } else if (countryCode === '+966') {
  109 |             phoneNumber = '5' + faker.string.numeric(8);
  110 |         } else {
  111 |             phoneNumber = faker.phone.number();
  112 |         }
  113 |     
  114 |         await this.PhoneNumber().fill(phoneNumber);
  115 |         await this.proceedBtn().click();
  116 |         await this.page.waitForLoadState("networkidle");
  117 |         await this.page.waitForTimeout(2000);
  118 |         await this.otpfield().fill('123456');
  119 |         await this.signinbtn().click();
  120 |     
  121 |         try {
  122 |             // Wait max 5-6 seconds for something indicating successful login, like wishlist button appearing or page navigation
  123 |             await this.page.waitForLoadState('networkidle', { timeout: 6000 });
  124 |             console.log(`✅ Login attempt for ${countryCode} completed.`);
  125 |         } catch (error) {
  126 |             console.warn(`⚠️ Login with ${countryCode} got stuck or failed. Continuing with the next test case.`);
  127 |         }
  128 |     
  129 |         await this.page.screenshot({ path: `screenshots/login_${countryCode}.png` });
  130 |     }
  131 |     
  132 |     
  133 |     async loginWithSaudiAndIndia() {
  134 |         // Attempt login with Saudi number
  135 |         await this.loginWithCountryCode(1, '+966');
  136 |         await this.page.waitForTimeout(2000);
  137 |     
  138 |         // Refresh or go home, just to reset UI state
  139 |         await this.navigateToHomePage();
  140 |         await this.page.waitForLoadState("networkidle");
  141 |         await this.page.waitForTimeout(2000);
  142 |     
  143 |         // Attempt login with Indian number
  144 |         await this.loginWithCountryCode(2, '+91');
  145 |         await this.page.waitForLoadState("networkidle");
  146 |     }
  147 |
  148 |     async verifyLoaderStuckOnInvalidOtp() {
  149 |         await this.page.waitForSelector('.globalloader', { state: 'hidden', timeout: 15000 });
  150 |     
  151 |         await this.loginicon().click();
  152 |         await this.page.waitForLoadState("networkidle");
  153 |         await this.countrycodelist().selectOption({ index: 1 });
  154 |         await this.PhoneNumber().fill('500000000');
  155 |         await this.proceedBtn().click();
  156 |         await this.page.waitForLoadState("networkidle");
  157 |         await this.page.waitForTimeout(2000);
  158 |     
  159 |         // Enter invalid OTP
  160 |         await this.otpfield().fill('000000');
  161 |         await this.signinbtn().click();
  162 |     
  163 |         console.log('⚠️ Waiting to see if loader disappears or remains stuck...');
  164 |         try {
  165 |             // If loader still visible after 10 seconds, fail test
  166 |             await this.page.waitForSelector('.globalloader', { state: 'hidden', timeout: 10000 });
  167 |             console.log('✅ Loader disappeared — system responded to invalid OTP.');
  168 |         } catch (error) {
  169 |             console.error('❗ BUG: Loader still hanging on invalid OTP, no validation message.');
  170 |             await this.page.screenshot({ path: 'screenshots/loader_stuck_on_invalid_otp.png' });
  171 |             throw new Error('BUG: Loader remains stuck and no validation message appears after entering invalid OTP.');
  172 |         }
  173 |     }
  174 |
  175 |     // Perform login through wishlist if user is un-authenticated
  176 |     async loginThroughWishlist() {
  177 |         await this.wishListicon().click();
  178 |         await this.getStartedBtn().click();
  179 |         await this.page.waitForLoadState("networkidle");
  180 |         await this.page.waitForTimeout(1000);
```