# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Header tests >> Verify that un-authenticated user can login through wishlist
- Location: D:\gogomotor\tests\header\headerTest.spec.ts:40:9

# Error details

```
Error: locator.fill: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByRole('textbox', { name: 'Mobile Number' })

    at HeaderPage.loginThroughWishlist (D:\gogomotor\pages\headerPage.ts:180:34)
    at D:\gogomotor\tests\header\headerTest.spec.ts:41:9
```

# Test source

```ts
   80 |         await this.deals().click();
   81 |         await this.page.waitForLoadState("networkidle");
   82 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/campaigns', { timeout: 15000 });
   83 |
   84 |         await this.services().click();
   85 |         await this.page.waitForLoadState("networkidle");
   86 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/vas/warranty', { timeout: 15000 });
   87 |
   88 |         await this.page.screenshot({ path: "screenshots/header_tabs.png" });
   89 |         console.log('✅ All header tabs navigated successfully.');
   90 |     }
   91 |
   92 |     async loginWithCountryCode(index: number, countryCode: string) {
   93 |         //await this.page.waitForSelector('.globalloader', { state: 'detached', timeout: 10000 });
   94 |         await this.page.waitForSelector('.globalloader', { state: 'hidden', timeout: 15000 });
   95 |
   96 |         await this.loginicon().click();
   97 |         await this.page.waitForLoadState("networkidle");
   98 |         await this.page.waitForTimeout(2000);
   99 |     
  100 |         await this.countrycodelist().selectOption({ index });
  101 |         await this.page.waitForTimeout(1000);
  102 |     
  103 |         let phoneNumber = '';
  104 |         if (countryCode === '+91') {
  105 |             phoneNumber = '9' + faker.string.numeric(9);
  106 |         } else if (countryCode === '+966') {
  107 |             phoneNumber = '5' + faker.string.numeric(8);
  108 |         } else {
  109 |             phoneNumber = faker.phone.number();
  110 |         }
  111 |     
  112 |         await this.PhoneNumber().fill(phoneNumber);
  113 |         await this.proceedBtn().click();
  114 |         await this.page.waitForLoadState("networkidle");
  115 |         await this.page.waitForTimeout(2000);
  116 |         await this.otpfield().fill('123456');
  117 |         await this.signinbtn().click();
  118 |     
  119 |         try {
  120 |             // Wait max 5-6 seconds for something indicating successful login, like wishlist button appearing or page navigation
  121 |             await this.page.waitForLoadState('networkidle', { timeout: 6000 });
  122 |             console.log(`✅ Login attempt for ${countryCode} completed.`);
  123 |         } catch (error) {
  124 |             console.warn(`⚠️ Login with ${countryCode} got stuck or failed. Continuing with the next test case.`);
  125 |         }
  126 |     
  127 |         await this.page.screenshot({ path: `screenshots/login_${countryCode}.png` });
  128 |     }
  129 |     
  130 |     
  131 |     async loginWithSaudiAndIndia() {
  132 |         // Attempt login with Saudi number
  133 |         await this.loginWithCountryCode(1, '+966');
  134 |         await this.page.waitForTimeout(2000);
  135 |     
  136 |         // Refresh or go home, just to reset UI state
  137 |         await this.navigateToHomePage();
  138 |         await this.page.waitForLoadState("networkidle");
  139 |         await this.page.waitForTimeout(2000);
  140 |     
  141 |         // Attempt login with Indian number
  142 |         await this.loginWithCountryCode(2, '+91');
  143 |         await this.page.waitForLoadState("networkidle");
  144 |     }
  145 |
  146 |     async verifyLoaderStuckOnInvalidOtp() {
  147 |         await this.page.waitForSelector('.globalloader', { state: 'hidden', timeout: 15000 });
  148 |     
  149 |         await this.loginicon().click();
  150 |         await this.page.waitForLoadState("networkidle");
  151 |         await this.countrycodelist().selectOption({ index: 1 });
  152 |         await this.PhoneNumber().fill('500000000');
  153 |         await this.proceedBtn().click();
  154 |         await this.page.waitForLoadState("networkidle");
  155 |         await this.page.waitForTimeout(2000);
  156 |     
  157 |         // Enter invalid OTP
  158 |         await this.otpfield().fill('000000');
  159 |         await this.signinbtn().click();
  160 |     
  161 |         console.log('⚠️ Waiting to see if loader disappears or remains stuck...');
  162 |         try {
  163 |             // If loader still visible after 10 seconds, fail test
  164 |             await this.page.waitForSelector('.globalloader', { state: 'hidden', timeout: 10000 });
  165 |             console.log('✅ Loader disappeared — system responded to invalid OTP.');
  166 |         } catch (error) {
  167 |             console.error('❗ BUG: Loader still hanging on invalid OTP, no validation message.');
  168 |             await this.page.screenshot({ path: 'screenshots/loader_stuck_on_invalid_otp.png' });
  169 |             throw new Error('BUG: Loader remains stuck and no validation message appears after entering invalid OTP.');
  170 |         }
  171 |     }
  172 |
  173 |     // Perform login through wishlist if user is un-authenticated
  174 |     async loginThroughWishlist() {
  175 |         await this.wishListicon().click();
  176 |         await this.getStartedBtn().click();
  177 |         await this.page.waitForLoadState("networkidle");
  178 |         await this.page.waitForTimeout(1000);
  179 |         await this.signinbtn().click();
> 180 |         await this.PhoneNumber().fill('9906754324')
      |                                  ^ Error: locator.fill: Test timeout of 30000ms exceeded.
  181 |
  182 |
  183 |     
  184 |     }
  185 | }
```