# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Header tests >> Verify that user can login
- Location: D:\gogomotor\tests\header\headerTest.spec.ts:25:9

# Error details

```
TimeoutError: page.waitForSelector: Timeout 15000ms exceeded.
Call log:
  - waiting for locator('.globalloader') to be hidden
    34 × locator resolved to visible <div class="globalloader ">…</div>

    at HeaderPage.loginWithCountryCode (D:\gogomotor\pages\headerPage.ts:93:25)
    at D:\gogomotor\tests\header\headerTest.spec.ts:27:26
```

# Test source

```ts
   1 | import { Page, expect } from "@playwright/test";
   2 | import { faker } from "@faker-js/faker";
   3 |
   4 | export class HeaderPage {
   5 |     private page: Page;
   6 |
   7 |     constructor(page: Page) {
   8 |         this.page = page;
   9 |     }
   10 |
   11 |     // Selectors
   12 |     private logoicon = () => this.page.getByRole("link", { name: /GoGo Motor - Buy and Sell/i });
   13 |     private languageSelector = () => this.page.getByRole("button", { name: "Riyadh" });
   14 |     private wishListicon = () => this.page.getByRole("button", { name: "wishlist" });
   15 |     private loginicon = () => this.page.getByRole("button", { name: "login" });
   16 |     private loginclosebtn = () => this.page.locator('#back-btn-wrapper div').getByRole('img');
   17 |     private newcars = () => this.page.getByRole('navigation').getByText('New Cars');
   18 |     private buysellcars = () => this.page.getByRole('navigation').getByText('Buy & Sell Used Cars');
   19 |     private deals = () => this.page.getByRole('navigation').getByText('Deals', { exact: true });
   20 |     private services = () => this.page.getByRole('navigation').getByText('Services');
   21 |     private countrycodelist = () => this.page.getByRole('combobox');
   22 |     private PhoneNumber = () => this.page.getByRole('textbox', { name: 'Mobile Number' });
   23 |     private proceedBtn = () => this.page.getByRole('button', { name: 'Proceed' });
   24 |     private otpfield = () => this.page.locator('input[name="OTPNumber"]');
   25 |     private signinbtn=() => this.page.getByRole('button', { name: 'Sign In' })
   26 |                 
   27 |     // Navigate to the home page
   28 |     async navigateToHomePage() {
   29 |         const baseUrl = process.env.BASE_URL;
   30 |         if (!baseUrl) {
   31 |             throw new Error("BASE_URL is not defined in environment variables.");
   32 |         }
   33 |
   34 |         await this.page.goto(baseUrl);
   35 |         await this.page.waitForLoadState("networkidle");  // Ensures all network requests are done
   36 |         await expect(this.page).toHaveURL(new RegExp(`${baseUrl}.*`), { timeout: 10000 });
   37 |
   38 |         console.log("✅ Current URL:", this.page.url());
   39 |     }
   40 |
   41 |     // Verify that all elements are displayed in the header
   42 |     async verifyHeaderElements() {
   43 |         await expect(this.logoicon()).toBeVisible();
   44 |         await expect(this.languageSelector()).toBeVisible();
   45 |         await expect(this.wishListicon()).toBeVisible();
   46 |         await expect(this.loginicon()).toBeVisible();
   47 |         await expect(this.newcars()).toBeVisible();
   48 |         await expect(this.buysellcars()).toBeVisible();
   49 |         await expect(this.deals()).toBeVisible();
   50 |         await expect(this.services()).toBeVisible();
   51 |
   52 |         await this.page.screenshot({ path: "screenshots/header_elements.png" });
   53 |         console.log('✅ All header elements are visible.');
   54 |     }
   55 |     
   56 |     // Verify that header top section elements are clickable
   57 |     async verifyClickFunctionality() {
   58 |         await this.wishListicon().click();
   59 |         await this.page.waitForLoadState("networkidle");  
   60 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/wishlist', { timeout: 15000 });
   61 |         console.log('✅ Wishlist icon clicked.');
   62 |
   63 |         await this.loginicon().click();
   64 |         await this.page.waitForLoadState("networkidle");
   65 |         await this.loginclosebtn().click();
   66 |         console.log('✅ Login icon clicked and closed.');
   67 |     }
   68 |
   69 |     // Verify navigation menu elements are clickable
   70 |     async verifyTabNavigation() {
   71 |         await this.newcars().click();
   72 |         await this.page.waitForLoadState("networkidle");
   73 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/newcars', { timeout: 15000 });
   74 |
   75 |         await this.buysellcars().click();
   76 |         await this.page.waitForLoadState("networkidle");
   77 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/used-cars/riyadh-surveyed', { timeout: 15000 });
   78 |
   79 |         await this.deals().click();
   80 |         await this.page.waitForLoadState("networkidle");
   81 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/campaigns', { timeout: 15000 });
   82 |
   83 |         await this.services().click();
   84 |         await this.page.waitForLoadState("networkidle");
   85 |         await expect(this.page).toHaveURL('https://liveuat.gogomotor.com/en/vas/warranty', { timeout: 15000 });
   86 |
   87 |         await this.page.screenshot({ path: "screenshots/header_tabs.png" });
   88 |         console.log('✅ All header tabs navigated successfully.');
   89 |     }
   90 |
   91 |     async loginWithCountryCode(index: number, countryCode: string) {
   92 |         //await this.page.waitForSelector('.globalloader', { state: 'detached', timeout: 10000 });
>  93 |         await this.page.waitForSelector('.globalloader', { state: 'hidden', timeout: 15000 });
      |                         ^ TimeoutError: page.waitForSelector: Timeout 15000ms exceeded.
   94 |
   95 |         await this.loginicon().click();
   96 |         await this.page.waitForLoadState("networkidle");
   97 |         await this.page.waitForTimeout(2000);
   98 |     
   99 |         await this.countrycodelist().selectOption({ index });
  100 |         await this.page.waitForTimeout(1000);
  101 |     
  102 |         let phoneNumber = '';
  103 |         if (countryCode === '+91') {
  104 |             phoneNumber = '9' + faker.string.numeric(9);
  105 |         } else if (countryCode === '+966') {
  106 |             phoneNumber = '5' + faker.string.numeric(8);
  107 |         } else {
  108 |             phoneNumber = faker.phone.number();
  109 |         }
  110 |     
  111 |         await this.PhoneNumber().fill(phoneNumber);
  112 |         await this.proceedBtn().click();
  113 |         await this.page.waitForLoadState("networkidle");
  114 |         await this.page.waitForTimeout(2000);
  115 |         await this.otpfield().fill('123456');
  116 |         await this.signinbtn().click();
  117 |     
  118 |         try {
  119 |             // Wait max 5-6 seconds for something indicating successful login, like wishlist button appearing or page navigation
  120 |             await this.page.waitForLoadState('networkidle', { timeout: 6000 });
  121 |             console.log(`✅ Login attempt for ${countryCode} completed.`);
  122 |         } catch (error) {
  123 |             console.warn(`⚠️ Login with ${countryCode} got stuck or failed. Continuing with the next test case.`);
  124 |         }
  125 |     
  126 |         await this.page.screenshot({ path: `screenshots/login_${countryCode}.png` });
  127 |     }
  128 |     
  129 |     
  130 |     async loginWithSaudiAndIndia() {
  131 |         // Attempt login with Saudi number
  132 |         await this.loginWithCountryCode(1, '+966');
  133 |         await this.page.waitForTimeout(2000);
  134 |     
  135 |         // Refresh or go home, just to reset UI state
  136 |         await this.navigateToHomePage();
  137 |         await this.page.waitForLoadState("networkidle");
  138 |         await this.page.waitForTimeout(2000);
  139 |     
  140 |         // Attempt login with Indian number
  141 |         await this.loginWithCountryCode(2, '+91');
  142 |         await this.page.waitForLoadState("networkidle");
  143 |     }
  144 |     
  145 | }
  146 |
```